# Changes to the v2 branch must be proposed via PRs in the branch
# v3-next. This way we can check the action just as GHA is going to
# use it.

name: Test cache

on:
  pull_request:

jobs:
  sanity-check:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        config:
          - version: '2.0.1'
            branch:  ''
          - version: '1.2.2'
            branch:  ''
          - version: 'nightly'
            branch:  ''
          - version: ''
            branch:  'master'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check PR comes from proper branch
        if: (github.head_ref || github.ref) != 'v3-next'
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed(`PRs for ${{github.base_ref}} must come from v3-next, but branch is ${{github.head_ref || github.ref}}`)

      # This might hit cache

      - name: Check action itself
        id: attempt_1
        uses: alire-project/setup-alire@v3-next
        with:
          version: ${{matrix.config.version}}
          branch: ${{matrix.config.branch}}

      # Next attemp should hit cache given the previous run

      - name: Check action itself
        if: steps.attempt_1.outputs.cache_hit != 'true'
        id: attempt_2
        uses: alire-project/setup-alire@v3-next
        with:
          version: ${{matrix.config.version}}
          branch: ${{matrix.config.branch}}

      - shell: bash
        run: |
          echo Caching attempt 1: ${{steps.attempt_1.outputs.cache_hit}} :: Caching attempt 2: ${{steps.attempt_2.outputs.cache_hit}}

      # Fail if no cache was hit
      - if: (steps.attempt_1.outputs.cache_hit != 'true') && (steps.attempt_2.outputs.cache_hit != 'true')
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('FAIL: No cache hit observed')

      # Check alr and default toolchains
      - run: alr -n version
      - run: |
          alr -n init --bin alrws
          cd alrws
          alr exec -- gnat --version
          alr exec -- gprbuild --version

      # Verify proper builds

      - run: alr -n version | grep "os:" | grep LINUX
        if: matrix.os == 'ubuntu-latest'
        shell: bash

      - run: alr -n version | grep "os:" | grep MACOS
        if: matrix.os == 'macos-latest'
        shell: bash

      - run: alr -n version | grep "os:" | grep WINDOWS
        if: matrix.os == 'windows-latest'
        shell: bash
