name: 'Alire Setup'
description: 'Install Alire package manager'
author: 'Alire Project'

inputs:
  version:
    description: Use this argument to install a stable or nightly release. Use a version number without v prefix, e.g., 1.0.1, 1.1.0, or 'nightly'. This argument will be ignored if a branch argument is supplied. Defaults to the latest stable release.
    required: false
    default: '1.2.2'
    # Also to be updated in test-cache-yml
  branch:
    description: Use this argument to install a development branch (e.g., master). Using this option will require a preexisting compiler in the workflow environment.
    required: false
    default: ''
  toolchain:
    description: Arguments to pass to `alr toolchain` after setup.
    required: false
    default: 'gnat_native gprbuild'
  toolchain_dir:
    description: Location to install toolchain under.
    required: false
    default: ''
  cache:
    description: Whether to reuse a cached previous install.
    required: false
    default: true

outputs:
  cache_hit:
    description: Whether a cached installation was reused
    value: ${{ steps.cache-alr.outputs.cache-hit }}

runs:
  using: "composite"
  steps:

    - name: Identify hash from which alr was built
      id: find-hash
      shell: bash
      run: |
        if [[ "${{ inputs.branch }}" != "" ]]; then
          echo "hash=$(git ls-remote --heads https://github.com/alire-project/alire ${{ inputs.branch }} | cut -f1)" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.version }}" != "nightly" ]]; then
          echo "hash=$(git ls-remote --tags https://github.com/alire-project/alire v${{ inputs.version }} | cut -f1)" >> $GITHUB_OUTPUT
        else
          echo "hash=$(git ls-remote --tags https://github.com/alire-project/alire ${{ inputs.version }} | cut -f1)" >> $GITHUB_OUTPUT
        fi

    - name: Reuse cached installation
      if: ${{ inputs.cache == 'true' && inputs.toolchain_dir == '' }}
      id: cache-alr
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.cache/alire
          ~/.config/alire
          ./alire_install
        key: alr[${{ inputs.version }}][${{ inputs.toolchain }}][${{ runner.os }}][${{ steps.find-hash.outputs.hash }}]
        # .cache contains msys64 install on Windows
        # .config contains the toolchain at the default location, besides index config
        # ./alire_install contains alr itself

    - name: Check cache output
      shell: bash
      run: |
        echo Cache hit result: [${{ steps.cache-alr.outputs.cache-hit }}] cache-id: ${{ steps.find-hash.outputs.hash }}

    # Ascertain if we need to install a toolchain for building from sources
    - name: Find GNAT
      shell: bash
      id: find-gnat
      run: gnat --version && echo "available=true" >> $GITHUB_OUTPUT || echo "available=false" >> $GITHUB_OUTPUT

    # Setup a GNAT if necessary
    - name: Install GNAT
      if: steps.find-gnat.outputs.available != "true"
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community

    # To run the old setup action which is javascript
    - name: Setup Node
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Install alr. If found cached it will return without reinstalling (but setting PATH).
    # We forward inputs as they're bugged for JS in composite actions.

    - run: node $(echo "${{ github.action_path }}/lib/main.js" | sed 's/\\/\//g') '${{ toJSON(inputs) }}'
      shell: bash
      # on Windows, backlashes mess things for bash, and powershell chokes on toJSON output

    # Display result for the record
    - shell: bash
      run: |
        which alr
        alr --version

    # Save cache early so we can verify its proper working in a test workflow. Otherwise
    # it's not saved until workflow completion and by then it's too late.
    - name: Cache install
      if: ${{ inputs.cache == 'true' && inputs.toolchain_dir == '' }}
      uses: actions/cache/save@v3
      with:
        path: |
          ~/.cache/alire
          ~/.config/alire
          ./alire_install
        key: ${{ steps.cache-alr.outputs.cache-primary-key }}
